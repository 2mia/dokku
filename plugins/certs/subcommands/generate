#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_AVAILABLE_PATH/nginx-vhosts/functions"

main() {
  declare cmd="certs:generate"
  local argv=("$@")
  [[ ${argv[0]} == "$cmd" ]] && shift 1
  [[ ! -z $DOKKU_APP_NAME ]] && set -- $DOKKU_APP_NAME $@
  set -- $cmd $@

  local APP="$2"; verify_app_name "$APP"
  local DOMAIN="$3";
  local APP_SSL_PATH="$DOKKU_ROOT/$APP/tls"

  if [[ ! -f "$APP_SSL_PATH/server.key" ]] && [[ ! -f "$APP_SSL_PATH/server.crt" ]]; then
    local TMP_WORK_DIR=$(mktemp -d -t "dokku_certs.XXXXXXXXX")
    trap 'rm -rf "$TMP_WORK_DIR" > /dev/null' INT TERM EXIT

    pushd $TMP_WORK_DIR > /dev/null

    openssl genrsa -des3 -passout pass:x -out server.pass.key 2048
    openssl rsa -passin pass:x -in server.pass.key -out server.key
    openssl req -new -key server.key -out server.csr
    openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt

    mkdir -p "$APP_SSL_PATH"
    dokku_log_info1 "Installing certificate and key..."
    mv -f $TMP_WORK_DIR/server.key $TMP_WORK_DIR/server.crt $APP_SSL_PATH
    chmod 750 $APP_SSL_PATH
    chmod 640 $APP_SSL_PATH/server.key $APP_SSL_PATH/server.crt
    [[ -n "$DOMAIN" ]] && (dokku domains:add $APP $DOMAIN || nginx_build_config $APP)
    dokku_log_info1 "The following is a certificate signing request that can be used"
    dokku_log_info1 "to generate an 'officially' signed SSL certificate for $APP at $DOMAIN"
    dokku_log_info1 "by a CA of your choosing."
    cat server.csr
  else
    dokku_log_info1 "$APP has an SSL endpoint already defined"
  fi
}

main "$@"
