#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"

print_dokku_scale_file() {
  local APP="$1"; local DOKKU_SCALE_FILE="$DOKKU_ROOT/$APP/DOKKU_SCALE"
  while read -r line || [[ -n "$line" ]]; do
    dokku_log_info2_quiet "$line"
  done < "$DOKKU_SCALE_FILE"
}

generate_scale_file() {
  local APP="$1"; local IMAGE_TAG="$3"; local IMAGE=$(get_app_image_name $APP $IMAGE_TAG); local DOKKU_SCALE_FILE="$DOKKU_ROOT/$APP/DOKKU_SCALE"
  verify_app_name "$APP"

  copy_from_image "$IMAGE" "/app/DOKKU_SCALE" "$DOKKU_ROOT/$APP" 2>/dev/null || true
  if [[ ! -f $DOKKU_SCALE_FILE ]]; then
    dokku_log_info1_quiet "DOKKU_SCALE file not found in app image. Generating one based on Procfile..."

    TMP_WORK_DIR=$(mktemp -d)
    trap 'rm -rf "$TMP_WORK_DIR" > /dev/null' RETURN

    copy_from_image "$IMAGE" "/app/Procfile" "$TMP_WORK_DIR" 2>/dev/null || true
    local PROCFILE="$TMP_WORK_DIR/Procfile"
    if [[ ! -e "$PROCFILE" ]]; then
      echo "web=1" >> $DOKKU_SCALE_FILE
    else
      while read -r line || [[ -n "$line" ]]; do
        [[ "$line" =~ ^#.* ]] && continue
        NAME=${line%%:*}
        NUM_PROCS=0
        [[ "$NAME" == "web" ]] && NUM_PROCS=1
        [[ -n "$NAME" ]] && echo "$NAME=$NUM_PROCS" >> $DOKKU_SCALE_FILE
      done < "$PROCFILE"
    fi
    dokku_log_info1_quiet "New DOKKU_SCALE file generated"
  else
    dokku_log_info1_quiet "DOKKU_SCALE file found ($DOKKU_SCALE_FILE)"
  fi
  print_dokku_scale_file $APP
}

set_scale() {
  local APP="$1"; local DOKKU_SCALE_FILE="$DOKKU_ROOT/$APP/DOKKU_SCALE"
  shift 1
  local SCALE_SETTINGS=("$@")
  for procscale in "${SCALE_SETTINGS[@]}"; do
    PROC_NAME=${procscale%%=*}
    PROC_COUNT=${procscale#*=}
    is_number $PROC_COUNT || dokku_log_fail "ps:scale $PROC_COUNT is not a number"
    dokku_log_info1_quiet "Scaling $APP:$PROC_NAME to $PROC_COUNT"
    if (egrep -q ^${PROC_NAME}= $DOKKU_SCALE_FILE > /dev/null 2>&1); then
      sed --in-place "s:^${PROC_NAME}=.*:$PROC_NAME=$PROC_COUNT:g" $DOKKU_SCALE_FILE
    else
      echo "$PROC_NAME=$PROC_COUNT" >> $DOKKU_SCALE_FILE
    fi
  done
}

ps_main() {
  local APP="$1"; verify_app_name "$APP"
  local DOKKU_APP_RUNNING_CONTAINER_IDS=$(get_app_running_container_ids $APP)

  ! (is_deployed $APP) && echo "App $APP has not been deployed" && exit 0

  for CID in $DOKKU_APP_RUNNING_CONTAINER_IDS; do
    has_tty && DOKKU_RUN_OPTS="-i -t"
    dokku_log_info1_quiet "running processes in container: $CID"
    docker exec $DOKKU_RUN_OPTS $CID /bin/sh -c "ps auxwww"
  done
}

ps_start() {
  local APP="$1"; verify_app_name "$APP"
  local IMAGE_TAG=$(get_running_image_tag $APP);

  ! (is_deployed $APP) && echo "App $APP has not been deployed" && exit 0

  if ! (is_app_running $APP); then
    release_and_deploy "$APP" "$IMAGE_TAG"
  else
    echo "App $APP already running"
  fi
}

ps_stop() {
  local APP="$1"; verify_app_name "$APP"
  local DOKKU_APP_RUNNING_CONTAINER_IDS=$(get_app_running_container_ids $APP)

  ! (is_deployed $APP) && echo "App $APP has not been deployed" && exit 0

  if [[ -n "$DOKKU_APP_RUNNING_CONTAINER_IDS" ]]; then
    echo "Stopping $APP ..."
    docker stop $DOKKU_APP_RUNNING_CONTAINER_IDS > /dev/null || true
    plugn trigger post-stop $APP
  else
    echo "App $APP already stopped"
  fi
}

ps_rebuild() {
  local APP="$1"; verify_app_name "$APP"

  plugn trigger receive-app $APP
}

ps_restart() {
  local APP="$1"; verify_app_name "$APP"
  local IMAGE_TAG=$(get_running_image_tag $APP)

  ! (is_deployed $APP) && echo "App $APP has not been deployed" && exit 0

  release_and_deploy "$APP" "$IMAGE_TAG"
}

ps_scale() {
  local APP="$1"; verify_app_name "$APP"
  local IMAGE_TAG=$(get_running_image_tag $APP)
  local DOKKU_SCALE_FILE="$DOKKU_ROOT/$APP/DOKKU_SCALE"
  shift 1

  [[ ! -e $DOKKU_SCALE_FILE ]] && generate_scale_file "$APP" "$IMAGE_TAG"
  if [[ -z "$@" ]];then
    dokku_log_info1_quiet "Scaling for $APP"
    dokku_col_log_info1_quiet "proctype" "qty"
    dokku_col_log_info1_quiet "--------" "---"
    while read -r line || [[ -n "$line" ]]; do
      [[ -z "$line" ]] && continue
      PROC_NAME=${line%%=*}
      PROC_COUNT=${line#*=}
      dokku_col_log_info1 "$PROC_NAME" "$PROC_COUNT"
    done < "$DOKKU_SCALE_FILE"
  else
    set_scale "$APP" "$@"
    release_and_deploy "$APP" "$IMAGE_TAG"
  fi
}
